import os
import pandas as pd
import streamlit as st
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

st.header("üå≥ Decision Tree ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡πÅ‡∏Ç‡πá‡∏á")

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -------------------------------
try:
    # ‡∏´‡∏≤ path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (parent ‡∏Ç‡∏≠‡∏á pages/)
    root_dir = os.path.dirname(os.path.dirname(__file__))
    file_path = os.path.join(root_dir, "Data", "cirrhosis.csv")

    df = pd.read_csv(file_path)
    st.subheader("üëÄ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    st.write(df.head(10))
except FileNotFoundError:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå cirrhosis.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'Data' ‡∏Ç‡πâ‡∏≤‡∏á‡πÜ project")
    st.stop()

# -------------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target ‡πÅ‡∏•‡∏∞ features
# -------------------------------
target_col = "Status"  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (0=‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï, 1=‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï)
if target_col not in df.columns:
    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{target_col}' ‡πÉ‡∏ô dataset ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå cirrhosis.csv")
    st.stop()

X = df.drop(target_col, axis=1)
y = df[target_col]

# -------------------------------
# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing values
# -------------------------------
for col in X.columns:
    if X[col].dtype == "object":
        X[col] = X[col].fillna("Unknown").astype("category").cat.codes
    else:
        X[col] = X[col].fillna(X[col].mean())

# -------------------------------
# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train / test
# -------------------------------
x_train, x_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=200
)

# -------------------------------
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
# -------------------------------
model = DecisionTreeClassifier(random_state=42, max_depth=4)
dtree = model.fit(x_train, y_train)

# -------------------------------
# Input form ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# -------------------------------
st.subheader("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

user_input = {}
for col in X.columns:
    if X[col].dtype in ["int64", "float64"]:
        user_input[col] = st.number_input(
            f"{col}", float(X[col].min()), float(X[col].max()), float(X[col].mean())
        )
    else:
        options = list(df[col].astype("category").cat.categories)
        user_input[col] = st.selectbox(f"{col}", options)

# -------------------------------
# ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å input ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# -------------------------------
if st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"):
    input_df = pd.DataFrame([user_input])

    # preprocess ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö X
    for col in input_df.columns:
        if input_df[col].dtype == "object":
            input_df[col] = input_df[col].astype("category").cat.codes
    input_df = input_df.reindex(columns=X.columns, fill_value=0)

    y_pred = dtree.predict(input_df)[0]
    labels = {0: "‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", 1: "‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"}
    st.success(f"üîÆ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {labels[y_pred]}")

# -------------------------------
# ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
# -------------------------------
y_predict = dtree.predict(x_test)
score = accuracy_score(y_test, y_predict)
st.write(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: {score*100:.2f} %")

# -------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Decision Tree
# -------------------------------
fig, ax = plt.subplots(figsize=(16, 10))
tree.plot_tree(
    dtree,
    feature_names=X.columns,
    class_names=["‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"],
    filled=True,
    ax=ax,
)
st.pyplot(fig)
