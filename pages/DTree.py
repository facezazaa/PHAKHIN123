import os
import pandas as pd
import streamlit as st
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

st.header("üå≥ Decision Tree ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡πÅ‡∏Ç‡πá‡∏á")

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -------------------------------
try:
    root_dir = os.path.dirname(os.path.dirname(__file__))
    file_path = os.path.join(root_dir, "Data", "cirrhosis.csv")

    df = pd.read_csv(file_path)
    st.subheader("üëÄ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    st.write(df.head(10))
except FileNotFoundError:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå cirrhosis.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'Data'")
    st.stop()

# -------------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target ‡πÅ‡∏•‡∏∞ features
# -------------------------------
target_col = "Status"  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
if target_col not in df.columns:
    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{target_col}' ‡πÉ‡∏ô dataset")
    st.stop()

X = df.drop(target_col, axis=1)
y = df[target_col]

# -------------------------------
# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing values
# -------------------------------
for col in X.columns:
    if X[col].dtype == "object":
        X[col] = X[col].fillna("Unknown").astype("category").cat.codes
    else:
        X[col] = X[col].fillna(X[col].mean())

# -------------------------------
# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train / test
# -------------------------------
x_train, x_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=200
)

# -------------------------------
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
# -------------------------------
model = DecisionTreeClassifier(random_state=42, max_depth=4)
dtree = model.fit(x_train, y_train)

# -------------------------------
# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
# -------------------------------
y_predict = dtree.predict(x_test)
score = accuracy_score(y_test, y_predict)
st.write(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: {score*100:.2f} %")

# -------------------------------
# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å dataset ‡∏à‡∏£‡∏¥‡∏á (‡∏™‡∏∏‡πà‡∏° 1 ‡πÅ‡∏ñ‡∏ß)
# -------------------------------
st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")

rand_row = df.sample(1, random_state=42)
st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á):")
st.write(rand_row)

# preprocess ‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö X
row_proc = rand_row.drop(columns=[target_col])
for col in row_proc.columns:
    if row_proc[col].dtype == "object":
        row_proc[col] = row_proc[col].astype("category").cat.codes
row_proc = row_proc.reindex(columns=X.columns, fill_value=0)

pred = dtree.predict(row_proc)[0]
st.success(f"‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {pred}")

# -------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Decision Tree
# -------------------------------
st.subheader("üå≥ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Decision Tree")

fig, ax = plt.subplots(figsize=(16, 10))
tree.plot_tree(
    dtree,
    feature_names=X.columns,
    class_names=[str(c) for c in dtree.classes_],
    filled=True,
    ax=ax,
)
st.pyplot(fig)
